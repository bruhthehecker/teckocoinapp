/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CoinTransaction } from "./CoinTransaction";
import { CoinTransactionCountArgs } from "./CoinTransactionCountArgs";
import { CoinTransactionFindManyArgs } from "./CoinTransactionFindManyArgs";
import { CoinTransactionFindUniqueArgs } from "./CoinTransactionFindUniqueArgs";
import { DeleteCoinTransactionArgs } from "./DeleteCoinTransactionArgs";
import { CoinTransactionService } from "../coinTransaction.service";
@graphql.Resolver(() => CoinTransaction)
export class CoinTransactionResolverBase {
  constructor(protected readonly service: CoinTransactionService) {}

  async _coinTransactionsMeta(
    @graphql.Args() args: CoinTransactionCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CoinTransaction])
  async coinTransactions(
    @graphql.Args() args: CoinTransactionFindManyArgs
  ): Promise<CoinTransaction[]> {
    return this.service.coinTransactions(args);
  }

  @graphql.Query(() => CoinTransaction, { nullable: true })
  async coinTransaction(
    @graphql.Args() args: CoinTransactionFindUniqueArgs
  ): Promise<CoinTransaction | null> {
    const result = await this.service.coinTransaction(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CoinTransaction)
  async deleteCoinTransaction(
    @graphql.Args() args: DeleteCoinTransactionArgs
  ): Promise<CoinTransaction | null> {
    try {
      return await this.service.deleteCoinTransaction(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
