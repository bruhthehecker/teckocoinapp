/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  CoinTransaction as PrismaCoinTransaction,
} from "@prisma/client";

export class CoinTransactionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CoinTransactionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.coinTransaction.count(args);
  }

  async coinTransactions<T extends Prisma.CoinTransactionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CoinTransactionFindManyArgs>
  ): Promise<PrismaCoinTransaction[]> {
    return this.prisma.coinTransaction.findMany<Prisma.CoinTransactionFindManyArgs>(
      args
    );
  }
  async coinTransaction<T extends Prisma.CoinTransactionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CoinTransactionFindUniqueArgs>
  ): Promise<PrismaCoinTransaction | null> {
    return this.prisma.coinTransaction.findUnique(args);
  }
  async createCoinTransaction<T extends Prisma.CoinTransactionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CoinTransactionCreateArgs>
  ): Promise<PrismaCoinTransaction> {
    return this.prisma.coinTransaction.create<T>(args);
  }
  async updateCoinTransaction<T extends Prisma.CoinTransactionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CoinTransactionUpdateArgs>
  ): Promise<PrismaCoinTransaction> {
    return this.prisma.coinTransaction.update<T>(args);
  }
  async deleteCoinTransaction<T extends Prisma.CoinTransactionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CoinTransactionDeleteArgs>
  ): Promise<PrismaCoinTransaction> {
    return this.prisma.coinTransaction.delete(args);
  }
}
