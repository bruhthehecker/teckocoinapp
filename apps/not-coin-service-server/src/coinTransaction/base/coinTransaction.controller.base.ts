/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { CoinTransactionService } from "../coinTransaction.service";
import { CoinTransactionCreateInput } from "./CoinTransactionCreateInput";
import { CoinTransaction } from "./CoinTransaction";
import { CoinTransactionFindManyArgs } from "./CoinTransactionFindManyArgs";
import { CoinTransactionWhereUniqueInput } from "./CoinTransactionWhereUniqueInput";
import { CoinTransactionUpdateInput } from "./CoinTransactionUpdateInput";

export class CoinTransactionControllerBase {
  constructor(protected readonly service: CoinTransactionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: CoinTransaction })
  async createCoinTransaction(
    @common.Body() data: CoinTransactionCreateInput
  ): Promise<CoinTransaction> {
    return await this.service.createCoinTransaction({
      data: data,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [CoinTransaction] })
  @ApiNestedQuery(CoinTransactionFindManyArgs)
  async coinTransactions(
    @common.Req() request: Request
  ): Promise<CoinTransaction[]> {
    const args = plainToClass(CoinTransactionFindManyArgs, request.query);
    return this.service.coinTransactions({
      ...args,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: CoinTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async coinTransaction(
    @common.Param() params: CoinTransactionWhereUniqueInput
  ): Promise<CoinTransaction | null> {
    const result = await this.service.coinTransaction({
      where: params,
      select: {
        createdAt: true,
        id: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: CoinTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateCoinTransaction(
    @common.Param() params: CoinTransactionWhereUniqueInput,
    @common.Body() data: CoinTransactionUpdateInput
  ): Promise<CoinTransaction | null> {
    try {
      return await this.service.updateCoinTransaction({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: CoinTransaction })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteCoinTransaction(
    @common.Param() params: CoinTransactionWhereUniqueInput
  ): Promise<CoinTransaction | null> {
    try {
      return await this.service.deleteCoinTransaction({
        where: params,
        select: {
          createdAt: true,
          id: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
