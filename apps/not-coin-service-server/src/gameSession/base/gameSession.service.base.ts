/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, GameSession as PrismaGameSession } from "@prisma/client";

export class GameSessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.GameSessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.gameSession.count(args);
  }

  async gameSessions<T extends Prisma.GameSessionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameSessionFindManyArgs>
  ): Promise<PrismaGameSession[]> {
    return this.prisma.gameSession.findMany<Prisma.GameSessionFindManyArgs>(
      args
    );
  }
  async gameSession<T extends Prisma.GameSessionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameSessionFindUniqueArgs>
  ): Promise<PrismaGameSession | null> {
    return this.prisma.gameSession.findUnique(args);
  }
  async createGameSession<T extends Prisma.GameSessionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameSessionCreateArgs>
  ): Promise<PrismaGameSession> {
    return this.prisma.gameSession.create<T>(args);
  }
  async updateGameSession<T extends Prisma.GameSessionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameSessionUpdateArgs>
  ): Promise<PrismaGameSession> {
    return this.prisma.gameSession.update<T>(args);
  }
  async deleteGameSession<T extends Prisma.GameSessionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.GameSessionDeleteArgs>
  ): Promise<PrismaGameSession> {
    return this.prisma.gameSession.delete(args);
  }
}
